trigger:
- none

name: Azure Pipelines

variables:
  python.version: '3.7.6'
  terraform.version: '0.12.3'

stages:
- stage: Provisioning
  displayName: Infra Provisioning
  jobs:
    - job: ProvisioningAppService
      displayName: Provisioning AppService
      steps:
        - task: InstallSSHKey@0
          inputs:
            knownHostsEntry: 'default'
            sshPublicKey: '$(ssh_public_key)'
            sshKeySecureFile: 'id_rsa'
        # - task: Bash@3
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       'ls /home/vsts/work/_temp/'
        - task: AzureCLI@2
          displayName: Azure CLI to deploy required Azure resources
          inputs:
            azureSubscription: '$(azuresubscription)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location eastus --sku Standard_LRS
              az storage container create --name terraform --account-name $(terraformstorageaccount)         
              az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
        - task: AzurePowerShell@5
          displayName: Azure PowerShell script to get the storage key
          inputs:
            azureSubscription: '$(azuresubscription)'
            ScriptType: 'InlineScript'
            Inline: |
              # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
              # $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
              $key=(Get-AzStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
              Write-Host "##vso[task.setvariable variable=storagekey]$key"
            azurePowerShellVersion: 'LatestVersion'
        - task: replacetokens@3
          displayName: Replace tokens in terraform file
          inputs:
            targetFiles: '**/*.tf'
            encoding: 'auto'
            writeBOM: true
            escapeType: 'none'
            actionOnMissing: 'warn'
            keepToken: false
            tokenPrefix: '__'
            tokenSuffix: '__'
            useLegacyPattern: false
            enableTelemetry: true
        - task: TerraformInstaller@0
          displayName: Install Terraform
          inputs:
            terraformVersion: '0.12.3'
        - task: TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            backendServiceArm: '$(azuresubscription)'
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: 'terraform'
            backendAzureRmKey: 'terraform.tfstate'
        - task: TerraformTaskV1@0
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            environmentServiceNameAzureRM: '$(azuresubscription)'
        - task: TerraformTaskV1@0
          displayName: Terraform Validate & Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            commandOptions: '-auto-approve'
            environmentServiceNameAzureRM: '$(azuresubscription)'

- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool: 
      name: Hosted Ubuntu 1604
    steps:
      - task: ArchiveFiles@2
        displayName: 'Archive FakeRestAPI'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$fakerestapi-(Build.BuildId).zip'
          replaceExistingArchive: true
      - task: PublishBuildArtifacts@1
        displayName: 'Upload FakeRestAPI Package'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$fakerestapi-(Build.BuildId).zip'
          ArtifactName: 'fakerestapi-drop'
          # publishLocation: 'Container'
      - task: ArchiveFiles@2
        displayName: 'Archive Selenium files'
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/automatedtesting/selenium'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$selenium-tests-(Build.BuildId).zip'
          replaceExistingArchive: true
      - publish: $(Build.ArtifactStagingDirectory)/$selenium-tests-(Build.BuildId).zip
        artifact: selenium
        
- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'WAS-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: '$(azuresubscription)'
                appType: 'webApp'
                appName: 'ensureqltyrelc03-WAS'
                package: '$(Pipeline.Workspace)/fakerestapi-drop/$fakerestapi-(Build.BuildId).zip'
                deploymentMethod: 'auto'
  - deployment: VMDeploy
    displayName: VM Deploy
    environment:
      name: 'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              displayName: 'Install Dependencies'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                                  
                  sudo apt-get upgrade -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  pip3 install selenium
                                  
                  # download chrome driver
                  FILE=chromedriver_linux64.zip
                  if [ -f "$FILE" ]; then
                    echo "$FILE exists."
                  else
                    wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                  fi
                  # install chrome driver
                  unzip chromedriver_linux64.zip
                  sudo mv chromedriver /usr/bin/chromedriver
                  sudo chown root:root /usr/bin/chromedriver
                  sudo chmod +x /usr/bin/chromedriver
                  chromium-browser -version
                  chromedriver --version
                  # agent log analytics
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests-(Build.BuildId).zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  sudo mv ui-logs.log /var/logs

- stage: IntegrationTests
  displayName: Integration Tests
  jobs:
    - job: PostmanTests
      displayName: Postman Tests
      steps:
        - task: NodeTool@0
          displayName: Install Node v12.X
          inputs:
            versionSpec: '12.x'
        - task: CmdLine@2
          displayName: Install Newman
          inputs:
            script: 'npm install newman'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: CmdLine@2
          displayName: Run Data Validation Tests
          inputs:
            script: 'newman run automatedtesting/postman/DataValidationTestSuite.json -e automatedtesting/postman/DataValidationTestSuite.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
          continueOnError: true
        - task: CmdLine@2
          inputs:
            script: 'ls'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: PublishTestResults@2
          displayName: Publish Postman Test Reports
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'
            searchFolder: $(System.DefaultWorkingDirectory)
- stage: JMeterTests
  displayName: JMeter Tests
  jobs:
    - job: JMeterTests
      displayName: JMeter Tests
      steps:
        - task: JMeterInstaller@0
          inputs:
            jmeterVersion: '5.2.1'
        - task: Bash@3
          displayName: Run Endurance Test
          inputs:
            targetType: 'inline'
            script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
        - task: Bash@3
          displayName: Run Stress Test
          inputs:
            targetType: 'inline'
            script: 'jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport'
        - task: PublishBuildArtifacts@1
          displayName: Publish Jmeter Test Results
          inputs:
            PathtoPublish: 'automatedtesting/jmeter'
            ArtifactName: 'jmeter'
            publishLocation: 'Container'



