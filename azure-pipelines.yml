trigger:
- none

variables:
  python.version: '3.7.6'
  terraform.version: '0.14.3'

stages:
- stage: Terraform-CI
  displayName: Copy Artifacts from GitHub
  jobs:
    - job: PublishGitHubArtifacts
      displayName: Copy and Publish GitHub Artifacts
      steps:
        - task: CopyFiles@2
          displayName: Copy Terraform files to artifacts
          inputs:
            SourceFolder: 'terraform'
            Contents: '**'
            TargetFolder: '$(build.artifactstagingdirectory)/terraform'
        - task: PublishBuildArtifacts@1
          displayName: Publish Artifact
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
- stage: Terraform-CD
  displayName: Infra Provisioning
  jobs:
    - job: ProvisioningAppService
      displayName: Provisioning AppService
      steps:
        - task: AzureCLI@2
          displayName: Azure CLI to deploy required Azure resources
          inputs:
            azureSubscription: '$(azuresubscription)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az group create --name $(terraformstoragerg) --location eastus
              az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location eastus --sku Standard_LRS
              az storage container create --name terraform --account-name $(terraformstorageaccount)         
              az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
        - task: AzurePowerShell@5
          displayName: Azure PowerShell script to get the storage key
          inputs:
            azureSubscription: '$(azuresubscription)'
            ScriptType: 'InlineScript'
            Inline: |
              # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
              $key=(Get-AzStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
              Write-Host "##vso[task.setvariable variable=storagekey]$key"
            azurePowerShellVersion: 'LatestVersion'
        - task: replacetokens@3
          displayName: Replace tokens in terraform file
          inputs:
            targetFiles: '**/*.tf'
            encoding: 'auto'
            writeBOM: true
            escapeType: 'none'
            actionOnMissing: 'warn'
            keepToken: false
            tokenPrefix: '__'
            tokenSuffix: '__'
            useLegacyPattern: false
            enableTelemetry: true
        - task: TerraformInstaller@0
          displayName: Install Terraform
          inputs:
            terraformVersion: '0.14.3'
        - task: TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            backendServiceArm: '$(azuresubscription)'
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: 'terraform'
            backendAzureRmKey: 'terraform.tfstate'
        - task: TerraformTaskV1@0
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            environmentServiceNameAzureRM: '$(azuresubscription)'
        - task: TerraformTaskV1@0
          displayName: Terraform Validate & Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            commandOptions: '-auto-approve'
            environmentServiceNameAzureRM: '$(azuresubscription)'