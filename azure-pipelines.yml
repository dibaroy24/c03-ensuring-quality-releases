trigger:
  none

variables:
  python.version: '3.7.6'
  terraform.version: '0.13.4'
stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'default'
        sshPublicKey: '$(ssh_pub_key)'
        sshKeySecureFile: 'id_rsa'
    
    - task: Bash@3
      displayName: 'Run Postman tests'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
                
          # ------------- Install Dependencies -------------
          sudo apt-get upgrade -y
          sudo npm install -g newman reporter
                
          # ------------- Run Postman tests -------------
          echo "Clearing tests folder"
          sudo rm -rf newman/*
          echo "Running Regression tests ..."
          newman run postman/Regression_Tests.postman_collection.json -e postman/FakeRestAPI_Postman_environment.json --reporters cli,junit
          echo "Running Data Validation tests ..."
          newman run postman/Data_Validation_Tests.postman_collection.json -e postman/FakeRestAPI_Postman_environment.json --reporters cli,junit
    
    - task: PublishTestResults@2
      displayName: 'Publish Postman Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'newman/newman-*.xml' 

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: './fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive entire project files'
      inputs:
        rootFolderOrFile: './'
        includeRootFolder: true
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-project.zip
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-project.zip
      displayName: 'Publish Project Artifacts'
      artifact: drop-project

- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST-WAS'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'eqr-service-connection'
              appType: 'webApp'
              appName: 'udacityensureqltyrel-WAS'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
  - deployment: VMDeploy
    displayName: VM Deploy
    environment:
      name: 'TEST-VM'
      resourceType: VirtualMachine
      tags: 'CI-Testing'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Project Artifact'
            inputs:
              artifact: 'drop-project'
              path: $(Build.SourcesDirectory)
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                # ------------- Install Dependencies -------------
                sudo apt update && sudo apt upgrade -y
                sudo apt install python3-pip -y
                sudo apt install unzip -y
                sudo apt install -y chromium-browser
                pip3 install selenium
                
                # ------------- Install Chromedriver -------------
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/87.0.4280.66/chromedriver_linux64.zip
                fi

                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version

                
                if test -f "usr/bin/java"
                then
                  echo "JRE is already installed"
                else
                  echo "Install default JRE ..."
                  sudo apt install default-jre -y
                fi

                # ------------- Agent Log Analytics -------------------
                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com

          - task: JMeterInstaller@0
            displayName: 'Install JMeter'
            inputs:
              jmeterVersion: '5.2.1'
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: "$(Pipeline.Workspace)/drop-project/$(Build.BuildId)-project.zip"
              destinationFolder: "$(Pipeline.Workspace)/project"
              cleanDestinationFolder: true
          
          - task: Bash@3
            displayName: 'Run Selenium tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                # ------------- Run Selenium tests -------------
                cd ..
                if test -f '/var/logs/selenium/selenium_log.txt'
                then
                  sudo chmod 777 /var/logs/selenium/selenium_log.txt
                  python3 project/s/selenium/selenium_test.py
                else
                  echo "Creating selenium log file"
                  sudo mkdir -p /var/logs/selenium
                  sudo touch /var/logs/selenium/selenium_log.txt
                  sudo chmod 775 -R /var/logs      
                  sudo chmod 777 /var/logs/selenium/selenium_log.txt                  
                  echo "Running selenium tests ..."
                  python3 project/s/selenium/selenium_test.py
                fi
          
          - task: Bash@3
            displayName: 'Run JMeter tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                # --------- Preparing to run Jmeter tests HTML report directories -------------
                echo "Changing into Project jmeter dir ..."
                cd $(Pipeline.Workspace)/project/s/jmeter
                echo "Creating HTML report directories ..."
                mkdir stress_test_html_report endurance_test_html_report
                echo "Clearing previous results and html reports ..."
                rm -rf *.csv stress_test_html_report/* endurance_test_html_report/*
                echo "Preparing to run Jmeter tests ..."
                
                # --------- Run stress test --------------
                echo "Running stress test ..."
                jmeter -n -t stress_test_suite.jmx -l stress_test_result.csv -e -o stress_test_html_report/
                echo "HTML report written to -----> jmeter/stress_test_html_report"
                
                # --------- Run endurance test --------------
                echo "Running endurance test ..."
                jmeter -n -t endurance_test_suite.jmx -l endurance_test_results.csv -e -o endurance_test_html_report/
                echo "HTML report written to -----> jmeter/endurance_test_html_report"
